<?xml version="1.0" ?>
<tool id="qiime_sample-classifier_classify-samples-ncv" name="qiime sample-classifier classify-samples-ncv" version="2019.4">
	<description> - Nested cross-validated supervised learning classifier.</description>
	<requirements>
		<requirement type="package" version="2019.4">qiime2</requirement>
	</requirements>
	<command><![CDATA[
qiime sample-classifier classify-samples-ncv

--i-table=$itable
--m-metadata-column="$mmetadatacolumn"

#if $input_files_mmetadatafile:
#def list_dict_to_string(list_dict):
	#set $file_list = list_dict[0]['additional_input'].__getattr__('file_name')
	#for d in list_dict[1:]:
		#set $file_list = $file_list + ' --m-metadata-file=' + d['additional_input'].__getattr__('file_name')
	#end for
	#return $file_list
#end def
 --m-metadata-file=$list_dict_to_string($input_files_mmetadatafile)
#end if

#if $pcv:
 --p-cv=$pcv
#end if

#if str($prandomstate):
 --p-random-state="$prandomstate"
#end if

#set $pnjobs = '${GALAXY_SLOTS:-4}'

#if str($pnjobs):
 --p-n-jobs="$pnjobs"
#end if


#if $pnestimators:
 --p-n-estimators=$pnestimators
#end if

#if str($pestimator) != 'None':
 --p-estimator=$pestimator
#end if

#if $pparametertuning:
 --p-parameter-tuning
#end if

#if str($pmissingsamples) != 'None':
 --p-missing-samples=$pmissingsamples
#end if

--o-predictions=opredictions
--o-feature-importance=ofeatureimportance
;
cp opredictions.qza $opredictions;
cp ofeatureimportance.qza $ofeatureimportance
	]]></command>
	<inputs>
		<param format="qza,no_unzip.zip" label="--i-table: ARTIFACT FeatureTable[Frequency] Feature table containing all features that should be used for target prediction.                  [required]" name="itable" optional="False" type="data"/>
		<param label="--m-metadata-column: COLUMN  MetadataColumn[Categorical] Categorical metadata column to use as prediction target.                                      [required]" name="mmetadatacolumn" optional="False" type="text"/>
		<param label="--p-cv: INTEGER       Number of k-fold cross-validations to perform. Range(1, None)                                                [default: 5]" name="pcv" optional="True" type="integer" value="5" min="1"/>
		<param label="--p-random-state: INTEGER Seed used by random number generator.        [optional]" name="prandomstate" optional="True" type="integer"/>
		<param label="--p-n-estimators: INTEGER Range(1, None)     Number of trees to grow for estimation. More trees will improve predictive accuracy up to a threshold level, but will also increase time and memory requirements. This parameter only affects ensemble estimators, such as Random Forest, AdaBoost, ExtraTrees, and GradientBoosting.        [default: 100]" name="pnestimators" optional="True" type="integer" value="100" min="1"/>
		<param label="--p-estimator: " name="pestimator" optional="True" type="select">
			<option selected="True" value="None">Selection is Optional</option>
			<option value="RandomForestClassifier">RandomForestClassifier</option>
			<option value="ExtraTreesClassifier">ExtraTreesClassifier</option>
			<option value="GradientBoostingClassifier">GradientBoostingClassifier</option>
			<option value="AdaBoostClassifier">AdaBoostClassifier</option>
			<option value="KNeighborsClassifier">KNeighborsClassifier</option>
			<option value="LinearSVC">LinearSVC</option>
			<option value="SVC">SVC</option>
		</param>
		<param label="--p-parameter-tuning: --p-no-parameter-tuning Automatically tune hyperparameters using random grid search.                                [default: False]" name="pparametertuning" selected="False" type="boolean"/>
		<param label="--p-missing-samples: " name="pmissingsamples" optional="True" type="select">
			<option selected="True" value="None">Selection is Optional</option>
			<option value="error">error</option>
			<option value="ignore">ignore</option>
		</param>

		<repeat name="input_files_mmetadatafile" optional="True" title="--m-metadata-file">
			<param label="--m-metadata-file: Metadata file or artifact viewable as metadata. This option may be supplied multiple times to merge metadata. [optional]" name="additional_input" type="data" format="tabular,qza,no_unzip.zip" />
		</repeat>
	</inputs>
	<outputs>
		<data format="qza" label="${tool.name} on ${on_string}: predictions.qza" name="opredictions"/>
		<data format="qza" label="${tool.name} on ${on_string}: featureimportance.qza" name="ofeatureimportance"/>
	</outputs>
	<help><![CDATA[
Nested cross-validated supervised learning classifier.
######################################################

Predicts a categorical sample metadata column using a supervised learning
classifier. Uses nested stratified k-fold cross validation for automated
hyperparameter optimization and sample prediction. Outputs predicted values
for each input sample, and relative importance of each feature for model
accuracy.

Parameters
----------
table : FeatureTable[Frequency]
    Feature table containing all features that should be used for target
    prediction.
metadata : MetadataColumn[Categorical]
    Categorical metadata column to use as prediction target.
cv : Int % Range(1, None), optional
    Number of k-fold cross-validations to perform.
random_state : Int, optional
    Seed used by random number generator.
n_estimators : Int % Range(1, None), optional
    Number of trees to grow for estimation. More trees will improve
    predictive accuracy up to a threshold level, but will also increase
    time and memory requirements. This parameter only affects ensemble
    estimators, such as Random Forest, AdaBoost, ExtraTrees, and
    GradientBoosting.
estimator : Str % Choices('RandomForestClassifier', 'ExtraTreesClassifier', 'GradientBoostingClassifier', 'AdaBoostClassifier', 'KNeighborsClassifier', 'LinearSVC', 'SVC'), optional
    Estimator method to use for sample prediction.
parameter_tuning : Bool, optional
    Automatically tune hyperparameters using random grid search.
missing_samples : Str % Choices('error', 'ignore'), optional
    How to handle missing samples in metadata. "error" will fail if missing
    samples are detected. "ignore" will cause the feature table and
    metadata to be filtered, so that only samples found in both files are
    retained.

Returns
-------
predictions : SampleData[ClassifierPredictions]
    Predicted target values for each input sample.
feature_importance : FeatureData[Importance]
    Importance of each input feature to model accuracy.
	]]></help>
<macros>
    <import>qiime_citation.xml</import>
</macros>
<expand macro="qiime_citation"/>
</tool>
